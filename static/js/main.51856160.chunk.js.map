{"version":3,"sources":["img/bootstrap-nucamp-project.png","img/react-nucampsite-project.png","img/native-nucampsite.png","img/youtube-party.png","components/contact.js","components/hero.js","components/projectsInfo.js","components/projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmailPopover","props","Popover","trigger","placement","isOpen","popoverOpen","target","toggle","PopoverHeader","Contacts","useState","setPopoverOpen","Container","Row","style","margin","padding","Col","href","rel","color","id","Hero","Jumbotron","fluid","className","s","projectsInfo","name","technologies","github","website","image","youtubeParty","alt","bootstrapNucamp","reactNucamp","nativeNucamp","WebsiteButton","Button","size","Projects","renderProjects","map","project","key","Card","width","src","CardBody","CardTitle","CardText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51856160.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bootstrap-nucamp-project.6cabf67c.png\";","module.exports = __webpack_public_path__ + \"static/media/react-nucampsite-project.81653bee.png\";","module.exports = __webpack_public_path__ + \"static/media/native-nucampsite.c7cec695.png\";","module.exports = __webpack_public_path__ + \"static/media/youtube-party.84a05b90.png\";","import React, { useState } from 'react';\nimport { Container, Row, Col, Popover, PopoverHeader } from 'reactstrap';\nimport { FaLinkedin, FaGithub } from 'react-icons/fa';\nimport { FiMail } from 'react-icons/fi';\n\nconst EmailPopover = props => {\n  return (\n    <Popover\n      trigger=\"legacy\"\n      placement=\"bottom\"\n      isOpen={props.popoverOpen}\n      target=\"emailPopover\"\n      toggle={props.toggle}\n    >\n      <PopoverHeader>timothytcliu@gmail.com</PopoverHeader>\n    </Popover>\n  );\n};\n\nconst Contacts = () => {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const toggle = () => setPopoverOpen(!popoverOpen);\n\n  return (\n    <>\n      <Container>\n        <Row\n          style={{\n            margin: '0',\n            padding: '0',\n          }}\n        >\n          <Col>\n            <h2>\n              <a\n                href=\"https://www.linkedin.com/in/timothy-liu-784990138/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <FaLinkedin color=\"#0e76a8\" />\n              </a>{' '}\n              <a\n                href=\"https://github.com/timothytcliu\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <FaGithub color=\"white\" />\n              </a>{' '}\n              <FiMail color=\"#D44638\" id=\"emailPopover\" />\n              <EmailPopover popoverOpen={popoverOpen} toggle={toggle} />{' '}\n            </h2>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n","import React from 'react';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\nimport Contacts from './contact';\nimport '../App.css';\n\nconst Hero = () => {\n  return (\n    <>\n      <Jumbotron fluid className=\"hero\">\n        <Container fluid>\n          <Row>\n            <Col s=\"12\">\n              <h1 className=\"display-1\"> Timothy Liu </h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h3>Front-End Software Developer</h3>\n              <br />\n            </Col>\n          </Row>\n          <Contacts />\n        </Container>\n      </Jumbotron>\n    </>\n  );\n};\n\nexport default Hero;\n","/**\n * projectsInfo is an array that contains data for each app/project, stored in objects.\n * used by projects.js to render dynamically.\n */\n\nimport bootstrapNucamp from '../img/bootstrap-nucamp-project.png';\nimport reactNucamp from '../img/react-nucampsite-project.png';\nimport nativeNucamp from '../img/native-nucampsite.png';\nimport youtubeParty from '../img/youtube-party.png';\n\nexport const projectsInfo = [\n  {\n    id: 0,\n    name: 'YouTube Party',\n    technologies:\n      'Technologies: React.js, Javascript, Redux, React-Router, Bootstrap',\n    github: 'https://github.com/timothytcliu/YouTube-Party-React',\n    website: 'https://timothytcliu.github.io/YouTube-Party-React/',\n    image: youtubeParty,\n    alt: 'youtube-party-app',\n  },\n  {\n    id: 1,\n    name: 'Nu Camping',\n    technologies: 'Technologies: Bootstrap 4, HTML, CSS',\n    github: 'https://github.com/timothytcliu/Bootstrap-Nucamp-project',\n    website:\n      'https://timothytcliu.github.io/Bootstrap-Nucamp-project/index.html',\n    image: bootstrapNucamp,\n    alt: 'bootstrap-nucamp-project',\n  },\n  {\n    id: 2,\n    name: 'React Nu Camping',\n    technologies:\n      'Technologies: React.js, Javascript, Redux, React-Router, Bootstrap',\n    github: 'https://github.com/timothytcliu/React-nucampsite',\n    website: 'https://timothytcliu.github.io/React-nucampsite/',\n    image: reactNucamp,\n    alt: 'react-nucamp-project',\n  },\n  {\n    id: 3,\n    name: 'Native Nucampsite',\n    technologies: 'Technologies: React-Native, Expo, Redux',\n    github: 'https://github.com/timothytcliu/React-Native-nucamp-project',\n    website: '',\n    image: nativeNucamp,\n    alt: 'react-native-nucamp',\n  },\n];\n","import React from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  Button,\n} from 'reactstrap';\nimport { projectsInfo } from './projectsInfo';\nimport '../App.css';\n\n/**\n * Renders website link button conditionally based on props.\n * @param {string} website The string from projectsInfo website property.\n * @return {component} div If string is ''.\n * @return {component} Button With URL link.\n */\nconst WebsiteButton = ({ website }) => {\n  if (website === '') {\n    return <div />;\n  } else {\n    return (\n      <Button\n        href={website}\n        target=\"_blank\"\n        className=\"ml-3\"\n        size=\"sm\"\n        color=\"info\"\n      >\n        See Website\n      </Button>\n    );\n  }\n};\n\n/**\n * Displays app projects in reactstrap card elements,\n * dynamically rendered from imported projectsInfo array.\n */\nconst Projects = () => {\n  const renderProjects = projectsInfo.map(project => {\n    return (\n      <Container fluid=\"lg\" key={project.id}>\n        <Row>\n          <Col className=\"px-0\">\n            <Card className=\"mb-4\">\n              <img width=\"100%\" src={project.image} alt={project.alt} />\n              <CardBody className=\"card-color\">\n                <CardTitle>{project.name}</CardTitle>\n                <CardText>{project.technologies}</CardText>\n                <Button\n                  href={project.github}\n                  target=\"_blank\"\n                  className=\"mr-3\"\n                  size=\"sm\"\n                  color=\"info\"\n                >\n                  See Code\n                </Button>\n                <WebsiteButton website={project.website} />\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  });\n\n  return <>{renderProjects}</>;\n};\n\nexport default Projects;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Hero from './components/hero';\nimport Projects from './components/projects';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hero />\n      <Projects className=\"card\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}